

FabricV1.0官方链码示例调用

//////////////////////////////////////////////////////////////////////
示例路径:
    $GOPATH/src/github.com/hyperledger/fabric/examples/chaincode/go

路径下包括如下示例:
    chaincode_example01
    chaincode_example02
    chaincode_example03
    chaincode_example04
    chaincode_example05
    eventsender
    invokereturnsvalue
    map 
    marbles02
    passthru
    sleeper
    utxo

////////////////////////////////////////////////////////////////


///////////////////////////chaincode_example01 02 03 04 05 调用//////////////////
此示例主要实现如下的功能：

1. 初始化 A、B 两个账户，并为两个账户赋初始资产值；
2. 在 A、B 两个账户之间进行资产交易；
3. 分别查询 A、B 两个账户上的余额，确认交易成功；
4. 删除账户。

官方提供的自动化部署脚本network_setup.sh中，已经包含了启动Fabric实例chaincode_example02的脚本
network_setup.sh会执行以下前两条命令:
1. 安装chaincode_example02示例
peer chaincode install -n mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example
2. 初始化chaincode_example02示例
peer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
      --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
      -C mychannel -n  mycc -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 
      -c '{"Args":["init","a","100","b","200"]}' 
      -P "OR ('Org1MSP.member','Org2MSP.member')"


3. 初始化chaincode_example02示例成功后，就可以a,b两个账户之间进行资产交易. 例如: 把a账户的10元转给b账户，调用invoke命令：
peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
      --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
      -C mychannel -n mycc -c '{"Args":["invoke","a","b","10"]}'

3. 初始化chaincode_example02示例成功后，就分别查询a,b两个账户上的余额. 例如:调用query命令来查一下b账户的余额，如果没有计算错，应该是210元。
peer chaincode query -C mychannel -n mycc -c '{"Args":["query","b"]}'

////////////////////////////////////////////////////////



/////////////////////////////marbles chaincode 安装调用///////////////////////////////////////
此示例主要实现如下的功能：
      构建一个大理石交易平台



1. 安装marbles02示例
peer chaincode install -o orderer.example.com:7050 -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02

2.初始化marbles02示例和背书规则
peer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
        --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
         -C mychannel -n marbles -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/marbles02 
         -c '{"Args":["init"]}' 
         -P "OR ('Org0MSP.member','Org1MSP.member')"


3.调用marbles02链码,生成一些基本交易数据
peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
        --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
        -C mychannel -n marbles 
        -c '{"Args":["initMarble","marble1","blue","35","tom"]}'


peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
        --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
        -C mychannel -n marbles 
        -c '{"Args":["initMarble","marble2","red","50","tom"]}'


peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
        --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
        -C mychannel -n marbles 
        -c '{"Args":["initMarble","marble3","blue","70","tom"]}'

peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
         --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
         -C mychannel -n marbles 
         -c '{"Args":["transferMarble","marble2","jerry"]}'

peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
           --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
           -C mychannel -n marbles 
           -c '{"Args":["transferMarblesBasedOnColor","blue","jerry"]}'


peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
            --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
            -C mychannel -n marbles 
            -c '{"Args":["delete","marble1"]}'
            
            
            
            
执行查询marbles2的记录命令:
peer chaincode query -C mychannel -n marbles -c '{"Args":["readMarble","marble2"]}'

返回结果如下
Query Result: {"color":"red","docType":"marble","name":"marble2","owner":"jerry","size":50}

查询marble1的历史数据
peer chaincode query -C mychannel -n marbles -c '{"Args":["getHistoryForMarble","marble1"]}'
返回结果如下
Query Result: [{"TxId":"1c3d3caf124c89f91a4c0f353723ac736c58155325f02890adebaa15e16e6464",
"Value":{"docType":"marble","name":"marble1","color":"blue","size":35,"owner":"tom"}},{"TxId":"755d55
c281889eaeebf405586f9e25d71d36eb3d35420af833a20a2f53a3eefd",
"Value":{"docType":"marble","name":"marble1","color":"blue","size":35,"owner":"jerry"}},{"TxId":"819451
032d813dde6247f85e56a89262555e04f14788ee33e28b232eef36d98f", "Value":}]

复杂查询所有属于jerry 的marble
peer chaincode query -C mychannel -n marbles -c '{"Args":["queryMarblesByOwner","jerry"]}'

返回结果如下
Query Result: [{"Key":"marble2",
"Record":{"color":"red","docType":"marble","name":"marble2","owner":"jerry","size":50}},{"Key":"marble
3", "Record":{"color":"blue","docType":"marble","name":"marble3","owner":"jerry","size":70}}]

通过Owener 属性查询marble，value为jerry
peer chaincode query -C mychannel -n marbles -c'{"Args":["queryMarbles","{\"selector\":{\"owner\":\"jerry\"}}"]}'
返回结果如下
Query Result: [{"Key":"marble2","Record":{"color":"red","docType":"marble","name":"marble2","owner":"jerry","size":50}},
{"Key":"marble3", "Record":{"color":"blue","docType":"marble","name":"marble3","owner":"jerry","size":70}}]

/////////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////map 调用//////////////////
此实例主要实现如下的功能： 
   1.模拟一个map数据模型
   2. 调用put/remove/get/keys/query/history函数
   

peer chaincode install -n mymap -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/map

peer chaincode instantiate -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
      --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
      -C mychannel -n  mymap -v 1.0 -p github.com/hyperledger/fabric/examples/chaincode/go/map
      -c '{"Args":["init"]}' 
      -P "OR ('Org1MSP.member','Org2MSP.member')"

peer chaincode invoke -o orderer.example.com:7050 --tls $CORE_PEER_TLS_ENABLED 
      --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/cacerts/ca.example.com-cert.pem 
      -C mychannel -n mymap -c '{"Args":["put","a","10"]}'
/////////////////////////////////////////////////////////////////////////////

///////////////////////////passthru 调用//////////////////
此示例主要实现如下的功能： 
   调用其它链码,实现透传功能
/////////////////////////////////////////////////////////////////////////////

///////////////////////////sleeper 调用//////////////////
此示例主要实现如下的功能： 
    定时休眠功能
/////////////////////////////////////////////////////////////////////////////

///////////////////////////utxo链码调用//////////////////

UTXO链码

UTXO示例链码包含一个名为execute的调用函数。该函数接受来自Bitcoin网络的BASE64编码的事务。此链码将解析事务，
并将事务组件传递到Bitcoin libconsensus C库以进行脚本验证。

这个链码的目的是为了

    演示如何使用世界状态来存储和处理未使用的交易输出（UTXO）。

    演示如何在链码内包含和使用C库。

/////////////////////////////////////////////////////////////////////////////

